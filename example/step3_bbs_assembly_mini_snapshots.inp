* ASSEMBLY OF BINARY BILAYER SYSTEM from pre-equilibrated B1 and B2 
*                                                                            *
* written by Soohyung Park                 date: Nov. 15, 2023   
*                                                                            *
* Based on scripts GENERATED BY CHARMM-GUI (http://www.charmm-gui.org) v3.7 
*

DIMENS CHSIZE 5000000 MAXRES 3000000

! In this example, GWALP is embedded in B1 (orderd phase)
!                  B2 is lipid only

! PATHs in use
! ------------
! @{sdir1}: path for B1
! @{sdir2}: path for B2
! @{odir1} : output path for the assembled BBS

set sdir1 = bilayers
set sdir2 = bilayers
set odir1 = charmm
set odir2 = openmm

! Read topology and parameter files
stream toppar.str

!! READ B1
! Read the system information
stream @{sdir1}/bb1.str

! save box sizes
calc LX1 = @{A}
calc LY1 = @{B}
calc LZ1 = @{C}

! Read PSF
open read unit 10 card name @{sdir1}/bb1.psf
read psf  unit 10 card xplor

! Read Coordinate
open read unit 10 card name @{sdir1}/bb1.crd
read coor unit 10 card

! Rename SEGId of B1
rename segid PRO1 sele segid PROA end
rename segid MEM1 sele segid MEMB end
rename segid WAT1 sele segid TIP3 end
rename segid ION1 sele segid IONS end

!! READ B2
! Read the system information
stream @{sdir2}/bb2.str

! save box sizes
calc LX2 = @{A}
calc LY2 = @{B}
calc LZ2 = @{C}

! Read PSF
open read unit 10 card name @{sdir2}/bb2.psf
read psf  unit 10 card xplor append

! Read Coordinate
open read unit 10 card name @{sdir2}/bb2.crd
read coor unit 10 card append

! Rename SEGId of B2
rename segid MEM2 sele segid MEMB end
rename segid WAT2 sele segid TIP3 end
rename segid ION2 sele segid IONS end

! define PROT, MEMB, and BULK (water and ions) for later use
define PROT sele segid PRO* end
define MEMB sele segid MEM1 .or. segid MEM2 end
define BULK sele segid WAT* .or. segid ION* end

! Define representative atoms for selections
define BX sele BULK .and. .not. hydrogen end
define BX sele BX .or. ( MEMB .and. resname DSPC .and. type P ) end
define BX sele BX .or. ( MEMB .and. resname DOPC .and. type P ) end
define BX sele BX .or. ( MEMB .and. resname CHL1 .and. type O3 ) end

! Define backbone and side chain
define BB sele ( ( type C   .or. type O   .or. type N   .or. type CA  .or. -
                 type P   .or. type O1P .or. type O2P .or. type O5' .or. -
                 type C5' .or. type C4' .or. type C3' .or. type O3' ) -
                .and. segid PRO* ) end
define SC sele PROT .and. .not. ( BB .or. hydrogen ) end

! Selection B1 and B2 (w/out PROT)
define B1 sele segid MEM1 .or. segid WAT1 .or. segid ION1 end
define B2 sele segid MEM2 .or. segid WAT2 .or. segid ION2 end

! Find the x-ranges of B1 and B2
coor stat sele B1 .and. .not. hydrogen end
calc xmaxmin1 = ?xmax - ?xmin

coor stat sele B2 .and. .not. hydrogen end
calc xmaxmin2 = ?xmax - ?xmin

! Difference between LX and X
calc wx1 = @{xmaxmin1} - @{LX1}
calc wx2 = @{xmaxmin2} - @{LX2}

calc XM = 8.0 ! width of each mixing zone (lefl / right)

! Select molecules to be fixed during each miminization cycle
define FIXED sele NONE end
define TARG sele BX .and. B1 end
calc ntarg = ?nsel
! set core region
calc xcmin = -0.5 * ( @{LX1} - @{XM} )
calc xcmax = -1.0 * @{xcmin}

set ifx1 = 1
label find_fix1
  define XX sele TARG .subset. @{ifx1} end
  set segid = ?selsegi
  set resid = ?selresi
  set resnm = ?selresn
  set type  = ?seltype
  q @{segid} @{resid} @{type}
  
  if ?xval .gt. @{xcmin} then
    if ?xval .lt. @{xcmax} then
      define FIXED sele FIXED .or. ( segid @{segid} .and. resnm @{resnm} .and. resid @{resid} ) end
    endif
  endif

incr ifx1 by 1
if ifx1 .le. @{ntarg} goto find_fix1

define TARG sele BX .and. B2 end
calc ntarg = ?nsel
! set core region
calc xcmin = -0.5 * ( @{LX2} - @{XM} )
calc xcmax = -1.0 * @{xcmin}

set ifx2 = 1
label find_fix2
  define XX sele TARG .subset. @{ifx2} end
  set segid = ?selsegi
  set resid = ?selresi
  set resnm = ?selresn
  set type  = ?seltype
  q @{segid} @{resid} @{type}

  if ?xval .gt. @{xcmin} then
    if ?xval .lt. @{xcmax} then
      define FIXED sele FIXED .or. ( segid @{segid} .and. resnm @{resnm} .and. resid @{resid} ) end
    endif
  endif

incr ifx2 by 1
if ifx2 .le. @{ntarg} goto find_fix2

! Translation of B1 and B2
! # B1 by -(LX1 + wx1)/2
! # B2 by  (LX2 + wx2)/2

calc xtran1 = -0.5 * ( @{LX1} + @{wx1} )
coor trans xdir @{xtran1} sele B1 .or. PROT end

calc xtran2 = 0.5 * ( @{LX2} + @{wx2} )
coor trans xdir @{xtran2} sele B2 end

!! Save the first translated ...
open write unit 10 card name @{odir1}/step3_arranged.psf
write psf  unit 10 card

open write unit 10 card name @{odir1}/step3_arranged.oldpsf
write psf  unit 10 card oldpsf

open write unit 10 card name @{odir1}/step3_arranged.pdb
write coor unit 10 pdb

open write unit 10 card name @{odir1}/step3_arranged.crd
write coor unit 10 card

! Set target LX and LY
if @{LX1} .gt. @{LX2} then
  calc LX = 2.0 * @{LX1}
else
  calc LX = 2.0 * @{LX2}
endif
if @{LY1} .gt. @{LY2} then
  calc LY = @{LY1}
else
  calc LY = @{LY2}
endif
if @{LZ1} .gt. @{LZ2} then
  calc LZ = @{LZ1}
else
  calc LZ = @{LZ2}
endif

!! Removal of bad contact by a series of minimization
! Ref. CHARMM documentation: crystal.doc
! https://academiccharmm.org/documentation/latest/crystl
!
! Expanded box size w/out contact between B1 and B2 (including images)
calc LXI = @{xmaxmin1} + @{xmaxmin2}

! Cell constants
set boxtype  = RECT
set xtltype  = ORTHORHOMBIC
set alpha    = 90.0
set beta     = 90.0
set gamma    = 90.0
calc A = @{LXI}
calc B = @{LY}
calc C = @{LZ}

set ZCEN = 0.0

! Setup restraints

! Set force constants for restraining potential
calc bbforce = 10.0 ! for PROT BB
calc scforce = 5.0  ! for PROT SC
calc mforce  = 2.0  ! for MEMB, WATER, and ions

! Loop parameter
set icmax = 10 ! max iteration number (depending on MX-LX)
set icycl = 1

! Initial displancement in minimization-shrinking steps
calc xtrans1 =  0.5 * 0.5 * @{wx1} 
calc xtrans2 = -0.5 * 0.5 * @{wx2} 

! Dihedral restraints; use a modified script from CHARMM-GUI
! Apply one time before minimization loop starts
set fcis   =   250  ! dihedral restraint force constant to keep the cis double bonds
set fc2    =   250  ! dihedral restraint force constant to keep the c2  chirality

define TMP sele MEMB .and. BX end
calc nlipid = ?nsel

stream setup_dihe_rest.str

! Minimization loop
label mini_loop

  !
  ! Image Setup
  !
  open read unit 10 card name crystal_image.str
  CRYSTAL DEFINE @XTLtype @A @B @C @alpha @beta @gamma
  CRYSTAL READ UNIT 10 CARD
  
  !Image centering by residue
  IMAGE BYRESID XCEN 0.0 YCEN 0.0 ZCEN @zcen sele B1 .or. B2 end
  IMAGE BYSEGID XCEN 0.0 YCEN 0.0 ZCEN @zcen sele PROT end

  ! Fix position of core lipids
  cons fix sele FIXED end

  !
  ! Nonbonded Options
  !
  system "python checkfft.py ?XTLA ?XTLB ?XTLC > checkfft.str"
  stream checkfft.str
  
  nbonds atom vatom vfswitch bycb -
         ctonnb 10.0 ctofnb 12.0 cutnb 16.0 cutim 16.0 -
         inbfrq -1 imgfrq -1 wmin 1.0 cdie eps 1.0 -
         ewald pmew fftx @fftx ffty @ffty fftz @fftz  kappa .34 spline order 6
  energy
  
  ! Set up restraints
  ! 1. PROT: HARMONIC w.r.t. its current position
  cons harm force @{bbforce} sele BB end
  cons harm force @{scforce} sele SC end
  
  ! setup SHAKE 
  shake bonh param fast
  
  ! Minimize 
  mini abnr nstep 50 nprint 5
  mini sd   nstep 50 nprint 5
  mini abnr nstep 200 nprint 20

  ! Write coordinates, and information of the assembled system
  open write unit 10 card name @{odir1}/step3_bbs_asssembly_mini_@{icycl}.str
  write title unit 10
  * SET BOXTYPE  = @{BOXTYPE}
  * SET XTLTYPE  = @{XTLTYPE}
  * SET A        = @{A}
  * SET B        = @{B}
  * SET C        = @{C}
  * SET ALPHA    = 90.0
  * SET BETA     = 90.0
  * SET GAMMA    = 90.0
  * SET ZCEN     = 0.0
  * SET LX       = @{LX}
  * SET LY       = @{LY}
  *
  
  open write unit 10 card name @{odir1}/step3_bbs_assembly_mini_@{icycl}.pdb
  write coor unit 10 pdb
  
  open write unit 10 card name @{odir1}/step3_bbs_assembly_mini_@{icycl}.crd
  write coor unit 10 card

  ! Unset restraints & Free crystal
  shake off
  cons fix sele NONE end
  cons harm clear
  crystal free
  
  ! System size reduction & X-translation
  ! 1. Exit the loop if the criterion is met
  calc err = ( @{A} - @{LX} )
  if @{err} .le. 1.0 then goto done_mini
  
  ! 2.1. Shrink box size
  calc A = @{A} - 0.5 * @{err}
  
  ! 2.2. Translate toward the box center for new box size
  coor trans xdir @{xtrans1} sele B1 .or. PROT  end
  coor trans xdir @{xtrans2} sele B2 end

  calc xtrans1 = 0.5 * @{xtrans1}
  calc xtrans2 = 0.5 * @{xtrans2}
  
  ! Update shrinking step
  incr icycl by 1

  if icycl .le. @{icmax} goto mini_loop

label done_mini

! Optional:
! match Z-dimensions between B1 and B2
!
! It may be needed for some cases, where LZ1 and LZ2 are significantly different.
! In this case, equilibration of BBS may fail
! due to too large void(s) developed during NVT equilibration.
!
! Chosen water and ions are moved to the other bilayer side &
!                           tanslated along Z-dimension to match LZ1 and LZ2
!

coor stat sele segid WAT1 .or. segid ION1 end
calc zmin1 = ?zmin
calc zmax1 = ?zmax
coor stat sele segid WAT2 .or. segid ION2 end
calc zmin2 = ?zmin
calc zmax2 = ?zmax

! Set upper/lower bound of Z-range
if @{LZ1} .gt. @{LZ2} then
  calc zmax = @{zmax2}
  calc zmin = @{zmin2}
else
  calc zmax = @{zmax1}
  calc zmin = @{zmin1}
endif

! Set reference Z-positions zup and zdn.
! Waters and ions above zup or below zdn are moved.
calc dzup = 0.5 * abs ( @{zmax1} - @{zmax2} ) 
calc dzdn = 0.5 * abs ( @{zmin1} - @{zmin2} ) 
calc zup = @{zmax} + @{dzup} + 0.5 ! Give a room of 0.5 A 
calc zdn = @{zmin} - @{dzdn} - 0.5

! Select water and ions to move to the other bilayer side
if @{LZ1} .gt. @{LZ2} then
  define TWup sele .byres. (( B1 .and. BULK .and. .not. hydrogen ) .and. -
                           ( prop Z .gt. @{zup} )) end
  calc ntwup = ?nsel

  define TWdn sele .byres. (( B1 .and. BULK .and. .not. hydrogen ) .and. -
                           ( prop Z .lt. @{zdn} )) end
  calc ntwdn = ?nsel
else
  define TWup sele .byres. (( B2 .and. BULK .and. .not. hydrogen ) .and. -
                           ( prop Z .gt. @{zup} )) end
  calc ntwup = ?nsel

  define TWdn sele .byres. (( B2 .and. BULK .and. .not. hydrogen ) .and. -
                           ( prop Z .lt. @{zdn} )) end
  calc ntwdn = ?nsel
endif

! update Z-shift
calc dzup = @{dzup} - 0.5 ! At the end 1 A gap between two layers ...
calc dzdn = @{dzdn} - 0.5 

if @{ntwup} .gt. 0 then
  coor stat sele TWup end
  if @{LZ1} .gt. @{LZ2} then
    calc xtran2 = -?xmin + 0.5 * @{err}
  else
    calc xtran2 = -?xmax - 0.5 * @{err}
  endif
  coor trans xdir @{xtran2} zdir -@{dzup} sele TWup end
endif
if @{ntwdn} .gt. 0 then
  coor stat sele TWdn end
  if @{LZ1} .gt. @{LZ2} then
    calc xtran2 = -?xmin + 0.5 * @{err}
  else
    calc xtran2 = -?xmax - 0.5 * @{err}
  endif
  coor trans xdir @{xtran2} zdir @{dzdn} sele TWdn end
endif

! Update LZ & C
coor stat sele all end
calc LZ = ?zmax - ?zmin
calc C = @{LZ}

!
! Write PSF, coordinates, and information of the assembled system
!

open write unit 10 card name @{odir1}/step3_bbs_assembly.str
write title unit 10
* SET BOXTYPE  = @{BOXTYPE}
* SET XTLTYPE  = @{XTLTYPE}
* SET A        = @{A}
* SET B        = @{B}
* SET C        = @{C}
* SET ALPHA    = 90.0
* SET BETA     = 90.0
* SET GAMMA    = 90.0
* SET ZCEN     = 0.0
* SET LX       = @{LX}
* SET LY       = @{LY}
* SET FFTX     = @{fftx}
* SET FFTY     = @{ffty}
* SET FFTZ     = @{fftz}
*

open write unit 10 card name @{odir1}/step3_bbs_assembly.psf
write psf  unit 10 card

open write unit 10 card name @{odir1}/step3_bbs_assembly.oldpsf
write psf  unit 10 card oldpsf

open write unit 10 card name @{odir1}/step3_bbs_assembly.pdb
write coor unit 10 pdb

open write unit 10 card name @{odir1}/step3_bbs_assembly.crd
write coor unit 10 card

! Prepare OpenMM inputs

! Write new psf/pdb/crd/str
calc hxtla = 0.5 * @{A} 
calc hxtlb = 0.5 * @{B}
calc hxtlc = 0.5 * @{C}

coor trans xdir @{hxtla} ydir @{hxtlb} zdir @{hxtlc} sele all end

open write unit 10 card name @{odir2}/step3_bbs_assembly.psf
write psf  unit 10 card

open write unit 10 card name @{odir2}/step3_bbs_assembly.oldpsf
write psf  unit 10 card oldpsf

open write unit 10 card name @{odir2}/step3_bbs_assembly.pdb
write coor unit 10 pdb

open write unit 10 card name @{odir2}/step3_bbs_assembly.crd
write coor unit 10 card

! Write list of restraints
! prot positions to be restrained in initial equilibration & US simulations
open write unit 10 card name @{odir2}/restraints/prot_pos.txt

define TARG sele BB end
calc ntarg = ?nsel
if @{ntarg} .gt. 0 then
  set i = 1
  label prot_pos_bb
    define XX sele TARG .subset. @i end
    ! OpenMM index = CHARMM index - 1
    set iatom = ?selatom
    calc index0 = @iatom - 1

    write title unit 10
    * @{index0} BB
    *
  
  incr i by 1
  if i .le. @{ntarg} goto prot_pos_bb
endif

define TARG sele SC end
calc ntarg = ?nsel
if @{ntarg} .gt. 0 then
  set i = 1
  label prot_pos_sc
    define XX sele TARG .subset. @i end
    ! OpenMM index = CHARMM index - 1
    set iatom = ?selatom
    calc index0 = @iatom - 1

    write title unit 10
    * @{index0} SC
    *

  incr i by 1
  if i .le. @{ntarg} goto prot_pos_sc
endif

! lipid position to be restrained by V(X)
open write unit 10 card name @{odir2}/restraints/lipid_pos.txt

set i = 1
define TARG sele BX .and. MEMB end
calc ntarg = ?nsel

label lipid_pos
  define XX sele TARG .subset. @i end
  ! OpenMM index = CHARMM index - 1
  set segid = ?selsegi
  set iatom = ?selatom
  calc index0 = @iatom - 1

  if @{segid} .eq. MEM1 set bbid = A
  if @{segid} .eq. MEM2 set bbid = B

  write title unit 10
  * @{index0} @{bbid}
  *

incr i by 1
if i .le. @{ntarg} goto lipid_pos

stop

