#!/bin/bash
#SBATCH --ntasks=1 --nodes=1 -p a100,v100,pascal,k40,k20
#SBATCH --ntasks-per-node=1 --cpus-per-task=2 --gres=gpu:1
#SBATCH --export=ALL
#SBATCH -t 12:00:00
#

# change dir to job submit dir 
cd $SLURM_SUBMIT_DIR
partition=${SLURM_JOB_PARTITION} # partition name
echo "# partition=${partition}"

source /u/spark/anaconda/2021.11/bin/activate
conda init

if [[ ${partition} == "k20" || ${partition} == "k40" ]] ; then
  module load cuda/10.2
  conda activate openmm8.0_cuda10.2
else
  module load cuda/11.8.0
  conda activate openmm8.0_cuda11.8.0
fi

LOCAL=.

xcom=0 # X-COM value for a box convention where X-box center is at X = 0

# Generated by CHARMM-GUI (http://www.charmm-gui.org) v3.7

# This folder contains a pre-optimized PDB structure and OpenMM inputs.
# All input files were optimized for OpenMM v6.2 or above, so lower version of OpenMM can cause some errors.
# You can get the latest development version of OpenMM at the git repository:
# https://github.com/pandegroup/openmm

init=step3_bbs_assembly
equi_prefix=step6.%d_equilibration
prod_prefix=step7_production
prod_step=step7

# Equilibration
cnt=1
while (( ${cnt} <= 6 )) ; do
    pcnt=$(( ${cnt} - 1 ))
    istep=`printf ${equi_prefix} ${cnt}`
    pstep=`printf ${equi_prefix} ${pcnt}`
    input_param="-t toppar.str -p ${init}.psf -c ${init}.crd"
    if (( ${cnt} == 1 )) ; then
      input_param=`echo "${input_param} -b sysinfo.dat"`
      # Box size for the initial system
      boxx=`cat sysinfo.dat | awk '{print $3/10.0}'`
    else
      input_param=`echo "${input_param} -irst ${pstep}.rst"`
      # Box size from the previous step
      boxx=`cat ${pstep}.com  |awk '{sum = sum + $1} END {if (NR > 0) print sum / NR}'`
    fi
    # Update Box center in the input script
    xomm=`python -c "print(${xcom} + ${boxx}/2.0)"` # Value converted for OpenMM Box convention
    sed "s/XCOM/${xomm}/g" ../openmm_script/${istep}.inp > ${istep}.inp
    # print XCOM
    echo "step6.${cnt}: XCOM(BOXCENTER AT X=0) = ${xcom}"
    echo "step6.${cnt}: XCOM(OpenMM) = ${xomm} BOXX = ${boxx}"

    python -u openmm_run.py -i ${istep}.inp ${input_param} -orst ${istep}.rst -odcd ${istep}.dcd -ocom ${istep}.com | tee ${istep}.out >& /dev/null

    # exit when output rst is not generated
    if [[ ! -e ${istep}.rst ]] ; then
      exit 0;
    fi

    cnt=$(( ${cnt} + 1 ))
done

jobnm=bbs
echo "sbatch -J ${jobnm} run_prod.slurm" > junk.sh
bash junk.sh

