#!/bin/bash
#SBATCH --ntasks=1 --nodes=1 -p a100,v100,pascal,k40,k20
#SBATCH --ntasks-per-node=1 --cpus-per-task=2 --gres=gpu:1
#SBATCH --export=ALL
#SBATCH -t 12:00:00
#

# change dir to job submit dir 
cd $SLURM_SUBMIT_DIR
partition=${SLURM_JOB_PARTITION} # partition name
echo "# partition=${partition}"

source /u/spark/anaconda/2021.11/bin/activate
conda init

if [[ ${partition} == "k20" || ${partition} == "k40" ]] ; then
  module load cuda/10.2
  conda activate openmm8.0_cuda10.2
else
  module load cuda/11.8.0
  conda activate openmm8.0_cuda11.8.0
fi

#-------------------------------------------------------------------------------
# Set paths
#
# odir = output path
# 
sdir=$SLURM_SUBMIT_DIR # current dir - slurm submit dir
LOCAL=${sdir}/tmp ; mkdir -p ${LOCAL} ;
odir=${LOCAL} 

xcom=0 # X-COM value for a box convention where X-box center is at X = 0

# Generated by CHARMM-GUI (http://www.charmm-gui.org) v3.7

# This folder contains a pre-optimized PDB structure and OpenMM inputs.
# All input files were optimized for OpenMM v6.2 or above, so lower version of OpenMM can cause some errors.
# You can get the latest development version of OpenMM at the git repository:
# https://github.com/pandegroup/openmm

init=step3_bbs_assembly
equi_prefix=step6.%d_equilibration
prod_prefix=step7_production
prod_step=step7

cd ${sdir}

# Equilibration
cnt=1
cntmax=10 # 10 ns

while (( ${cnt} <= ${cntmax} ))
do
    if [[ ! -e ${prod_step}_${cnt}.rst ]] ; then
       break
    else
      cnt=$(( $cnt + 1 ))
    fi
done
# updated cnt

# check file size w/ the previous one - should be put in the run_prod.slurm ??
if (( $cnt > 2 )) ; then
  pcnt=$(( $cnt - 1 ))
  # fsref=`ls -al ${prod_step}_${pcnt}.dcd | awk '{print $5}'`
  fsref=`ls -al ${prod_step}_1.dcd | awk '{print $5}'`
  if [[ -f ${prod_step}_${cnt}.dcd ]] ; then
    fsize=`ls -al ${prod_step}_${cnt}.dcd | awk '{print $5}'`
    if (( $fsref != $fsize )) ; then
      # remove the outputs for ${cnt} & update ${cnt}
      rm -f ${prod_step}_${cnt}.*
      cnt=${pcnt}
    fi
  else
    cnt=${cnt}
  fi
fi
# cnt is updated

if (( ${cnt} > ${cntmax} )) ; then
  echo "# job done" ; exit 0;
fi

# run simulations
i=1
imax=1 # for one 10-ns runs?

# Production
# The OpenMM check point file (.chk) cannot be used in a different machine environment.
# So please make sure if you are using the same GPU and CUDA version of machine while doing additional
# production steps with the check point file.
while (( ${i} <= ${imax} )) ; do
  if (( ${cnt} == 1 )) ; then
    pstep=`printf ${equi_prefix} 6`
  else
    pcnt=$(( ${cnt} - 1 ))
    if [[ ! -e ${prod_step}_${pcnt}.rst ]] ; then
      exit 0
    fi
    pstep=${prod_step}_${pcnt}
  fi
  istep=${prod_step}_${cnt}

  # Box size from the previous step
  boxx=`cat ${pstep}.com  |awk '{sum = sum + $1} END {if (NR > 0) print sum / NR}'`

  # Update Box center in the input script
  xomm=`python -c "print(${xcom} + ${boxx}/2.0)"` # Value converted for OpenMM Box convention
  sed "s/XCOM/${xomm}/g" ../openmm_script/${prod_prefix}.inp > ${prod_prefix}.inp

  # print XCOM
  echo "step7.${cnt}: XCOM(BOXCENTER AT X=0) = ${xcom}"
  echo "step7.${cnt}: XCOM(OpenMM) = ${xomm} BOXX = ${boxx}"

  input_param="-t toppar.str -p ${init}.psf -c ${init}.crd -irst ${pstep}.rst"
  python -u openmm_run.py -i ${prod_prefix}.inp ${input_param} -orst ${odir}/${istep}.rst -odcd ${odir}/${istep}.dcd -ocom ${odir}/${istep}.com > ${istep}.out

  # Check output & move outputs to ${sdir}
  if [[ ! -e ${odir}/${istep}.rst ]] ; then
    break
  else
    if (( $cnt == 1 )) ; then
      mv ${odir}/${istep}.* ${sdir}
      sleep 1
    else
      pcnt=$(( $cnt - 1 ))
      # fsref=`ls -al step7_${pcnt}.dcd | awk '{print $5}'`
      fsref=`ls -al ${prod_step}_1.dcd | awk '{print $5}'`
      fsize=`ls -al ${odir}/${prod_step}_${cnt}.dcd | awk '{print $5}'`
      if (( $fsref != $fsize )) ; then
        # remove the outputs for ${cnt} & update ${cnt}
        rm -f ${odir}/${istep}.*
        cnt=${pcnt}
      else
        # copy the results back & update cnt
        mv ${odir}/${istep}.* $SLURM_SUBMIT_DIR
        sleep 1
      fi
    fi
    cnt=$(( $cnt + 1 ))
  fi
  i=$(( ${i} + 1 ))

done

# clean local
rm -rf ${odir}

jobnm=bbs
echo "sbatch -J ${jobnm} run_prod.slurm" > junk.sh
bash junk.sh


